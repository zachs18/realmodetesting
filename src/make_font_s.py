from typing import List, Tuple
from collections import defaultdict

# A character is represented in memory as an array of 9 arrays of 5 bytes, 0 black, 15 white
# A character is represented in this script as a list of 9 ints with each bit representing a byte in the other version
# 31 == 15,15,15,15,15
#  7 ==  0, 0,15,15,15

# An unkown character has the top and bottom row all white, and the middle 7 rows encode the code (left 2 for 1, right 2 for 0)

def make_unknown_char(c: int) -> List[int]:
	return [31] + [(24 if (c & (1 << i)) else 3) for i in range(7)] + [31]

chars = defaultdict((lambda: None), {
	'0': [14, 17, 17, 19, 21, 25, 17, 17, 14],
	'1': [ 4, 12, 20,  4,  4,  4,  4,  4, 31],
	'2': [14, 17,  1,  1,  2,  4,  8, 16, 31],
	'3': [14, 17,  1,  1, 14,  1,  1, 17, 14],
	'4': [17, 17, 17, 17, 31,  1,  1,  1,  1],
	'5': [31, 16, 16, 16, 30,  1,  1, 17, 14],
	'6': [14, 17, 16, 16, 30, 17, 17, 17, 14],
	'7': [31,  1,  1,  2,  2,  2,  4,  4,  4],
	'8': [14, 17, 17, 17, 14, 17, 17, 17, 14],
	'9': [14, 17, 17, 17, 15,  1,  1, 17, 14],
	'A': [14, 17, 17, 17, 31, 17, 17, 17, 17],
	'B': [30, 17, 17, 17, 30, 17, 17, 17, 30],
	'C': [14, 17, 16, 16, 16, 16, 16, 17, 14],
	'D': [30, 17, 17, 17, 17, 17, 17, 17, 30],
	'E': [31, 16, 16, 16, 30, 16, 16, 16, 31],
	'F': [31, 16, 16, 16, 30, 16, 16, 16, 16],
	'G': [14, 17, 16, 16, 16, 19, 17, 17, 14],
	'H': [17, 17, 17, 17, 31, 17, 17, 17, 17],
	'I': [31,  4,  4,  4,  4,  4,  4,  4, 31],
	'J': [15,  2,  2,  2,  2,  2,  2, 18, 12],
	'K': [17, 17, 18, 20, 24, 20, 18, 17, 17],
	'L': [16, 16, 16, 16, 16, 16, 16, 16, 31],
	'M': [17, 17, 27, 27, 21, 21, 17, 17, 17],
	'N': [17, 17, 25, 25, 21, 19, 19, 17, 17],
	'0': [14] + [17]*7 + [14],
	'P': [30, 17, 17, 17, 30, 16, 16, 16, 16],
	'Q': [14, 17, 17, 17, 17, 17, 21, 18, 13],
	'R': [30, 17, 17, 17, 30, 20, 18, 17, 17],
	'S': [14, 17, 16, 16, 14, 17,  1,  1, 14],
	'T': [31] + [4]*8,
	'U': [17]*8 + [14],
	'V': [17, 17, 17, 17, 10, 10, 10,  4,  4],
	'W': [17, 17, 17, 21, 21, 21, 21, 10, 10],
	'X': [17, 17, 10, 10,  4, 10, 10, 17, 17],
	'Y': [17, 17, 17, 10,  4,  4,  4,  4,  4],
	'Z': [31,  1,  1,  2,  4,  8, 16, 16, 31],
	'a': [ 0,  0,  0, 14,  1, 15, 17, 17, 15],
	'b': [16, 16, 16, 16, 30, 17, 17, 17, 30],
	'c': [ 0,  0,  0, 14, 17, 16, 16, 17, 14],
	'd': [ 1,  1,  1,  1, 15, 17, 17, 17, 15],
	'e': [ 0,  0,  0, 14, 17, 31, 16, 17, 14],
	'f': [ 6,  9,  8,  8, 30,  8,  8,  8,  8],
	'g': [ 0, 15, 17, 17, 17, 15,  1, 17, 14],
	'h': [16, 16, 16, 16, 30, 17, 17, 17, 17],
	'i': [ 0,  4,  0, 12,  4,  4,  4,  4, 14],
	'j': [ 0,  2,  0,  2,  2,  2,  2, 18, 12],
	'k': [16, 16, 17, 18, 20, 24, 20, 18, 17],
	'l': [12,  4,  4,  4,  4,  4,  4,  4, 14],
	'm': [ 0,  0,  0, 30, 21, 21, 21, 21, 21],
	'n': [ 0,  0,  0, 30, 17, 17, 17, 17, 17],
	'o': [ 0,  0,  0, 14, 17, 17, 17, 17, 14],
	'p': [ 0,  0, 30, 17, 17, 30, 16, 16, 16],
	'q': [ 0,  0, 15, 17, 17, 15,  1,  1,  1],
	'r': [ 0,  0,  0, 30, 17, 16, 16, 16, 16],
	's': [ 0,  0,  0, 14, 16, 14,  1, 17, 14],
	't': [ 0,  8,  8, 30,  8,  8,  8,  9,  6],
	'u': [ 0,  0,  0, 17, 17, 17, 17, 17, 15],
	'v': [ 0,  0,  0, 17, 17, 10, 10,  4,  4],
	'w': [ 0,  0,  0, 17, 17, 21, 21, 10, 10],
	'x': [ 0,  0,  0,  0, 17, 10,  4, 10, 17],
	'y': [ 0,  0,  0, 17, 17, 10,  4,  8, 16],
	'z': [ 0,  0,  0, 31,  2,  4,  8, 16, 31],

	'.': [0]*8 + [4],
	',': [0]*7 + [4, 8],
	':': [ 0,  0,  0,  4,  0,  0,  0,  0,  4],
	';': [ 0,  0,  0,  4,  0,  0,  0,  4,  8],
	'-': [ 0,  0,  0,  0, 14,  0,  0,  0,  0],
	'+': [ 0,  0,  0,  4, 14,  4,  0,  0,  0],
	'/': [ 1,  1,  2,  2,  4,  8,  8, 16, 16],
	'\\':[16, 16,  8,  8,  4,  2,  2,  1,  1],
	'(': [ 2,  4,  8,  8,  8,  8,  8,  4,  2],
	')': [ 8,  4,  2,  2,  2,  2,  2,  4,  8],
	'{': [ 2,  4,  4,  4,  8,  4,  4,  4,  2],
	'}': [ 8,  4,  4,  4,  2,  4,  4,  4,  8],
	'[': [12,  8,  8,  8,  8,  8,  8,  8, 12],
	']': [ 6,  2,  2,  2,  2,  2,  2,  2,  6],
	'|': [4]*9,

	'"': [10, 10] + [0]*7,
	"'": [4, 4] + [0]*7,
	'<': [ 0,  0,  3, 12, 16, 12,  3,  0,  0],
	'>': [ 0,  0, 24,  6,  1,  6, 24,  0,  0],

	' ': [0]*9,
	'!': [4]*7 + [0, 4],
	'@': [14, 17, 17, 19, 21, 21, 23, 16, 14],
	'#': [ 0, 10, 10, 31, 10, 31, 10, 10,  0],
	'$': [ 4, 14, 20, 20, 14,  5,  5, 14,  4],
	'%': [ 0,  0, 17,  2,  4,  8, 17,  0,  0],
	'^': [ 4, 10, 17] + [0]*6,
	'&': [14, 17, 17, 18, 20,  8, 21, 18, 13],
	'*': [ 4, 21, 14, 21,  4,  0,  0,  0,  0],
	'_': [0]*8 + [31],
	'=': [ 0,  0,  0, 31,  0, 31,  0,  0,  0],
	'?': [14, 17,  1,  2,  4,  4,  4,  0,  4],
	'`': [ 8,  4] + [0]*7,
	'~': [ 0,  8, 21,  2,  0,  0,  0,  0,  0],

})

def row_to_bytes(row: int) -> bytes:
	return bytes([15 if row & (1 << i) else 0 for i in range(4,-1,-1)])


if __name__ == "__main__":
	print('\t.section ".font","a"')
	for i in range(128):
		rows = chars[chr(i)] or make_unknown_char(i)
		if len(rows) != 9:
			raise ValueError(i)
		print(f"\t.global char_{i:03d}")
		print(f"char_{i:03d}:")
		for row in rows:
			bs = row_to_bytes(row)
			print(f"\t.byte {bs[0]:2d},{bs[1]:2d},{bs[2]:2d},{bs[3]:2d},{bs[4]:2d}")


